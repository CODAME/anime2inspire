"use strict";
"use strict";!function(e,t,o,n){function a(){return 0===h.length&&(h=[].concat(m),h=h.shuffle()),h.pop()}function i(){return 0===p.length&&(p=[].concat(l),p=p.shuffle()),p.pop()}function s(e,t){return Math.floor(Math.random()*(t-e+1))+e}function r(){console.log("anime!"),o.getElementById("animeLoop").style.backgroundImage='url("'+a()+'")'}function c(){var e=i(),t="<p>"+e[0].replace(/ /g,"&nbsp;")+"<br/>"+e[1].replace(/ /g,"&nbsp;")+"</p>";console.log(t),o.getElementById("quoteZone").innerHTML=t}function f(){var e=s(0,1);0===e?r():c(),setTimeout(f,s(d,u))}var u=3e3,d=1e3,h=[],m=["./assets/img/pokemon/0b977cd54958098e4f243c71f4648ed51d3ba5fb36e1c3fa2e998f2076c34a99_1.gif","./assets/img/pokemon/32d1Km2.gif","./assets/img/pokemon/61c1e2f1e3cbc68731c06940a8cac3586b9bd3a11429e5f89da9810d171380bd_1.gif"],p=[],l=[["we tend to forget that happiness doesnt come as a result of getting","something we dont have, but of appreciating what we do have"],["seek freedom and become captive of your desires","seek discipline and find your liberty"],["it&apos;s not who you are that holds you back,","it&apos;s who you think you&apos;re not"],["when someone tells me no it doesnt mean i cant","it just means i cant do it with them"],["worrying does not take away tomorrows troubles","it takes away todays peace"],["dont wait for the perfect moment","take the moment and make it perfect"],["dont let people pull you into their storm","pull them into your peace"],["don&apos;t be afraid to fail","be afraid not to try"],["if you cannot be positive","then at least be quiet"],["perfection is not of the world","do your best and forget the rest"],["heroism is endurance","for one moment more"]];Array.prototype.shuffle=function(){for(var e=this.length-1;e>0;e--){var t=Math.floor(Math.random()*(e+1)),o=this[e];this[e]=this[t],this[t]=o}return this},setTimeout(f,s(d,u)),e(function(){})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
